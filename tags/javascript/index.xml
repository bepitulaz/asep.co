<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on ASPBGJ</title>
    <link>https://asepbagja.com/tags/javascript/</link>
    <description>Recent content in Javascript on ASPBGJ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 04 Jul 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://asepbagja.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to Functional Programming in JavaScript (Part 2)</title>
      <link>https://asepbagja.com/posts/introduction-to-functional-programming-in-javascript-part-2/</link>
      <pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://asepbagja.com/posts/introduction-to-functional-programming-in-javascript-part-2/</guid>
      <description>In part 1, we had learned about two important concepts in functional programming paradigm: immutable data and pure function. Now, we will learn another important concept in functional programming, that is higher order function.
According to Wikipedia, higher-order function is a function that does at least one of the following:
 takes one or more functions as arguments returns a function as its results.  JavaScript has the first-class function. It means the functions in JavaScript treats as a value, that we can assign it to the variable, pass it around, and return from another function.</description>
    </item>
    
    <item>
      <title>Introduction to Functional Programming in JavaScript (Part 1)</title>
      <link>https://asepbagja.com/posts/introduction-to-functional-programming-in-javascript-part-1/</link>
      <pubDate>Sun, 03 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://asepbagja.com/posts/introduction-to-functional-programming-in-javascript-part-1/</guid>
      <description>Imperative programming is a programming paradigm that uses a sequence of statements to reach a certain goal. It focuses on how to perform actions to achieve the expected result. Otherwise, functional programming paradigm concentrates on computing results rather than performing actions. In another word, the imperative one is an annoying micromanager in your office, and the functional one is a macromanager who just describe what&amp;rsquo;s the job to be done.</description>
    </item>
    
  </channel>
</rss>